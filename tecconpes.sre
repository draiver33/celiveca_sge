// Reporte Creado Autom ticamente por Datapro 
// Fecha      : 03/02/2009 Hora: 10:32:16
// Aplicaci¢n : 09 Producción                              
// Tabla      : DPORDENPRODUCC      

#include "dpxBase.CH"
#include "DpxReport.ch"

PROCE MAIN(oGenRep)
LOCAL cSql,oCursor,cMsg:="",oFont1,oFont2,cWhere:="",cDescri:="",nExiste:=0,aExiste:={},I
LOCAL cPiel:="",cPlan:="",cGru:="",aData:={},nAt:=0,cUndDes:=""

     PRIVATE oReport,nLineas:=0

     IF oGenRep=NIL
       RETURN .F.
     ENDIF

     CursorWait()
/*
     // Aqui puede Personalizar la Consulta <QUERY>
     oGenRep:cSqlSelect    :="SELECT XCAMPO FROM DPORDENPRODUCC"          // Nuevo Select
     oGenRep:cSqlInnerJoin:=" INNER JOIN TABLAB ON CAMPOA=CAMPOB " // Nuevo Inner Join
     oGenRep:cSqlOrderBy  :="ORDER BY XCAMPO"                      // Nuevo Order By
*/
     oGenRep:cWhere  :=oGenRep:BuildWhere()          // Where Según RANGO/CRITERIO
     cSql   :=oGenRep:BuildSql() // Genera Código SQL

     IF !EMPTY(RGO_I1) .AND. !EMPTY(RGO_F1)
        cWhere:="WHERE ORP_NUMERO>='"+RGO_I1+"' AND ORP_NUMERO<='"+RGO_F1+"'"
     ENDIF

     cSql:="SELECT ORP_CANTID,INV_DESCRI,COM_CODCOM,SUM(COM_CANTID*ORP_CANTID) AS COM_CANTID,COM_UNDMED,ORP_CODALM,"+;
           "ORP_NUMERO,ORP_FECHA,FOR_UNDMED,FOR_CODIGO,ORP_NUMMEZ,COM_COMPO,ORP_CODINV,MEM_MEMO "+;
           "FROM DPORDENPRODUCC INNER JOIN DPINV ON ORP_CODINV=INV_CODIGO "+;
           "INNER JOIN DPCOMPPRODUCCION ON ORP_CODINV=COM_CODINV AND ORP_CODFOR=COM_CODFOR "+;
           "INNER JOIN DPFORMULASPROD ON ORP_CODFOR=FOR_CODIGO AND ORP_CODINV=FOR_CODINV "+;
           "LEFT JOIN DPMEMO ON FOR_NUMMEM=MEM_NUMERO "+cWhere+;
           " GROUP BY COM_CODCOM,COM_COMPO,ORP_NUMERO "+;
           "ORDER BY INV_DESCRI"
    // ??ClpCOpy(cSql)
     oCursor:=OpenTable(cSql,.T.)

     oCursor:Replace("COM_DESCRI",SPACE(40))
     oCursor:Replace("COL_DESCRI",SPACE(20))
     oCursor:Replace("INV_EXISTE",0)
     oCursor:Replace("UND_DESCRI",SPACE(30))
     oCursor:Replace("TAL_01","AA")
// oCursor:Browse()
     WHILE !oCursor:Eof()
 
          cUndDes:=SQLGET("DPUNDMED","UND_DESCRI","UND_CODIGO='"+oCursor:FOR_UNDMED+"'")
          oCursor:Replace("UND_DESCRI",cUndDes)

          cGru:=SQLGET("DPINV","INV_GRUPO","INV_CODIGO='"+oCursor:COM_CODCOM+"'")

          cDescri:=SQLGET("DPINV","INV_DESCRI","INV_CODIGO"+GetWhere("=",oCursor:COM_CODCOM))
          oCursor:Replace("COM_DESCRI",cDescri)

          nExiste:=EJECUTAR("INVGETEXI",oCursor:COM_CODCOM,oCursor:COM_UNDMED,oCursor:ORP_CODALM,oDp:cSucursal,oDp:dFecha,TIME(),"MOV_FISICO")
          oCursor:Replace("INV_EXISTE",nExiste)   

         nAt:=ASCAN(aData,{|a,n|a[3]==oCursor:COM_CODCOM .AND. a[5]==oCursor:COM_UNDMED .AND. a[12]=oCursor:COM_COMPO})

         IF nAt>0
            aData[nAt,1]:=aData[nAt,1]+oCursor:ORP_CANTID
            aData[nAt,14]:=aData[nAt,4]+oCursor:COM_CANTID
         ELSE
            AADD(aData,oCursor:aDataFill[oCursor:RecNo()])
         ENDIF
****************************

          oCursor:DbSkip()
     ENDDO
// oCursor:Browse()
     oCursor:aDataFill:=ACLONE(aData)

     SET DECI TO 5

     oCursor:CtoDbf("CRYSTAL\TECCONPES1.DBF")

     SET DECI TO 2

     IF !ChkSql(cSql,@cMsg)      // Revisa Posible Ejecución SQL
        MensajeErr(cMsg,"Reporte <REPORTE>")
        Return .F.
     ENDIF

     IF !oGenRep:OutPut(.T.) // Verifica el Dispositivo de Salida Inicial
         RETURN .F.
     ENDIF

     IF oCursor:RecCount()=0
        MensajeErr("No fué posible Encontrar Información","Consulta Vacia Reporte <REPORTE>")
        oCursor:End()
        Return .F.
     ENDIF

     oCursor:GoTop()

     DEFINE FONT oFont1 NAME "ARIAL" SIZE 0,-10
     DEFINE FONT oFont2 NAME "ARIAL" SIZE 0,-10 BOLD

     REPORT oReport TITLE  "Requisicion de Materiales",;
            "Fecha: "+dtoc(Date())+" Hora: "+TIME();
            CAPTION "Requisicion de Materiales" ;
            FOOTER "Página: "+str(oReport:nPage,3)+" Registros: "+alltrim(str(nLineas,5)) CENTER ;
            FONT oFont1,oFont2;
            PREVIEW

     oGenRep:SetDevice(oReport) // Asigna parámetros

     
     COLUMN TITLE "Número de Pedido";
            DATA oCursor:ORD_PEDNUM;
            SIZE 10;
            LEFT 

     COLUMN TITLE "Cantidad de Bultos";
            DATA oCursor:ORP_BULTOS;
            PICTURE "999";
            SIZE 3;
            RIGHT  

     
     END REPORT

     oReport:bSkip:={||oCursor:DbSkip()}

     ACTIVATE REPORT oReport ;
              WHILE !oCursor:Eof();
              ON STARTGROUP oReport:NewLine();
              ON STARTPAGE  RepBitmap();
              ON CHANGE ONCHANGE()

     oGenRep:OutPut(.F.) // Verifica el Dispositivo de Salida Final

     oFont1:End()
     oFont2:End()

RETURN NIL

/*
// En Cada Registro se puede Aplicar Fórmulas
// Es llamado por Skip()
*/
FUNCTION ONCHANGE()

   nLineas:=nLineas+1 // Es Posible Aplicar Fórmulas

/*
// Si Desea Imprimir lineas Adicionales que no esten vacias
  
*/
   
 // PrintMemo(CAMPOMEMO,1,.F.,1) // Imprimir Campo Memo


RETURN .T.

/*
// Imprime Campos Memos
*/
FUNCTION PrintMemo(cMemo,nCol,lData,nIni)
     LOCAL nFor,aLines

     IF Empty(cMemo)
        RETURN ""
     ENDIF

     // Inicio del Línea
     DEFAULT nIni:=1

     cMemo :=STRTRAN(cMemo,CHR(10),"") // Convierte el Campo Memo en Arreglos
     aLines:=_VECTOR(cMemo,CHR(13))

     IF lData // Requiera la Primera Línea de Datos
        Return aLines[1]
     ENDIF

//   oReport:BackLine(1) // Retroceder una Línea
//   oReport:Newline()   // Adelanta una Línea
     FOR nFor := nIni TO LEN(aLines)
         oReport:StartLine()
         oReport:Say(nCol,aLines[nFor])
         oReport:EndLine()
     NEXT
     oReport:Newline()

RETURN ""

/*
// Inicio en Cada Página
*/
STATIC FUNCTION RepBitMap()

  DEFAULT oDp:cLogoBmp:="BITMAPS\LOGO.BMP"

  oReport:SayBitmap(.3,.3, oDp:cLogoBmp,.5,.5)

RETURN NIL
/*
oRun : objeto de Ejecución
*/

// EOF 
